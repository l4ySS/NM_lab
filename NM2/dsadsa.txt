def solution(A=Matrix(), N=0, L=0, f=Vector([]) , x=Vector([])):
    print(A)
    Q = make_matrix(N, L)

    for i in range(1, A.N + 1):
        s = A[i, 1]

        for k in range(A.k0(i), i):
            s = s - Q[i, i-k+1] ** 2
        Q[i, 1] = sqrt(s)

        for j in range(i + 1, A.kN(i) + 1):
           # print('j= ', j, ' i= ', i, 'A.L  =', A[i, j - i + 1])
            s = A[j, A.L - (j - i)]
      #      print(f'k(0) = {A.L - j + 1} s = {s} i = {i} j ={j}\n')
            for k in range(A.k0(i), i):
                print(f'i = {i} k = {k} j = {j}\n')
                if j <= A.L:
                    s = s - Q[k, i - k + 1] * Q[k, j - k + 1]

                if Q[i, A.L] != 0:
                    Q[i, j - i + 1] = s / Q[i, A.L]
                else:
                    Q[i, j - i + 1] = s
           # print(Q, '\n', 'i = ', i, '\n', 's = ', s, '\n')

    print(Q)
    return














    def solution(A=Matrix(), N=0, L=0, f=Vector([]) , x=Vector([])):
    print(A)
    Q = make_matrix(N, L)

    for i in range(1, A.N + 1):
        s = A[i, 1]

        for k in range(A.k0(i), i):
            s = s - Q[k, i-k+1] * Q[k, i-k+1]
       #     print(f'1 = {A[i, A.L-i+k]} 2 = {i - k} i = {i} k = {k}')
        Q[i, 1] = sqrt(s)
    #    print(f'A.kN(i) + 1 = {A.kN(i) + 1} i = {i}\n\n')
        for j in range(i + 1, A.kN(i) + 1):
       #     print('j= ', j, ' i= ', i, '\n\n\n')
            s = A[i, j - i + 1]
            print(f'k(0) = {A[j, A.L+i-j]} j ={j}\n')
            for k in range(A.k0(j), i):
              #  print(f'i = {i} k = {k} j = {j}\n')
                s = s - Q[k, i - k + 1] * Q[k, j - k + 1]
            Q[i, j - i + 1] = s / Q[i, 1]


           # print(Q, '\n', 'i = ', i, '\n', 's = ', s, '\n')

    print(Q)
    y = make_vector(A.N)
    for i in range(1, A.N+1):
        y[i] = 1
    print(y)
    for i in range(1, A.N + 1):
        s = 0 # f
        for j in range(A.k0(i), i):
            s = s - Q[j, (i - j) + 1]*y[i]
            print(f'f[{i}] - Q*y[{j}] = {Q[j, (i - j) + 1]} / q[{Q[i, 1]}] i = {i} = {(i - j) + 1}')
        s = s/Q[i, 1] # f =

    y = make_vector(A.N)

    for i in range(A.N, 0, -1):
        s = y[i]
        for j in range(i+1, A.kN(i) + 1):
            s = s - Q[i,j-i + 1]*y[i]
   ##         print(f'f[{i}] - Q*y[{i}] = {Q[i,j-i + 1]} / q[{Q[i, 1]}] i = {i} j = {j - i +1}')
    ##    s = s/Q[i, 1] # f =


    return









v2 = [Vector([0, 0, 0, 3, 3, 3]),
      Vector([0, 0, 4, 6, 2, 2]),
      Vector([0, 2, 5, 5, 2, 2]),
      Vector([1, 2, 9, -5, 3, 2])
      ]

v1 = [Vector([1.0,	2.0,	3.0,	4.0]),
Vector([1.0,	2.0,	3.0,	4.0]),
Vector([1.0,	2.0,	3.0,	4.0]),
Vector([1.0,	2.0,	3.0,	4.0]),
Vector([1.0,	2.0,	3.0,	4.0]),
Vector([1.0,	2.0,	3.0,	0]),
Vector([1.0,	2.0,	0,	0]),
Vector([1.0,	0,	0,	0])
      ]

v2 = [Vector([0,	0,	0,	1.0]),
Vector([0,       0,	    2.0,	1.0]),
Vector([0,  	3.0,	2.0,	1.0]),
Vector([4.0,	3.0,	2.0,	1.0]),
Vector([4.0,	3.0,	2.0,	1.0]),
Vector([4.0,	3.0,	2.0,	1.0]),
Vector([4.0,	3.0,	2.0,	1.0]),
Vector([4.0,	3.0,	2.0,	1.0])
      ]
vvv = [
    Vector([1, 2, 3, 4]),
    Vector([5, 8, 11, 4]),
    Vector([14, 20, 11, 4, ]),
    Vector([30, 20, 11, 4]),
    Vector([30, 20, 11, 4]),
    Vector([30, 20, 11, 0]),
    Vector([30, 20, 0, 0]),
    Vector([30, 0, 0, 0])
]
vvvbottom = [
    Vector([0, 0, 0, 1]),
    Vector([0, 0, 2, 5]),
    Vector([0, 3, 8, 14, ]),
    Vector([4, 11, 20, 30]),
    Vector([4, 11, 20, 30]),
    Vector([4, 11, 20, 30]),
    Vector([4, 11, 20, 30]),
    Vector([4, 11, 20, 30])

]
v3 = Vector([1, 2, 3])

v4 = Vector([1, 2, 3])
v5 = Vector([1, 2, 3])
v6 = Vector([1, 2, 3])

m1 = Matrix(v1)
m2 = Matrix(v2)
m3 = m1*m2

number = m1.N
m3 = Matrix()
m3.set(3, 3)
m3[1, 1] = 3
m2 = Matrix([v4, v5, v6])

ms = Matrix(vvvbottom)
mu = Matrix(v1)
ml = Matrix(v2)
A = make_A(mu,  8, 4)
#solution(ms, 8, 4, v3, v3)

# for j in range(i + 1, A.kN(i) + 1):
#    print('j= ', j, ' i= ', i, 'A.L  =', A.L)
#    s = A[i, j - i + A.L]
#    for k in range(A.k0(i), i):
#        s = s - Q[k, i - k + 1] * Q[k, j - k + 1]
#    Q[i, j - i + 1] = s / Q[i, 1]
